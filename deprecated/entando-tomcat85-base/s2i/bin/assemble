#!/bin/bash
source ${ENTANDO_COMMON_PATH}/translate-jboss-variables.sh
function init_derby(){
  if [ -d $1 ]; then
    WARS="$(dir $1/*.war)"
    for WAR in ${WARS[@]}; do
      ${ENTANDO_COMMON_PATH}/init-derby-from-war.sh --war-file=$WAR || exit 1
    done
  fi
}

# Source code provided to S2I is at ${HOME}
LOCAL_SOURCE_DIR=/opt/app-root/src
mkdir -p $LOCAL_SOURCE_DIR

# the subdirectory within LOCAL_SOURCE_DIR from where we should copy build
# artifacts (*.war, *.jar)
ARTIFACT_DIR=${ARTIFACT_DIR:-target}

mkdir -p $DEPLOYMENTS_DIR

# Copy the source for compilation
cp -Rf /opt/s2i/destination/src/. $LOCAL_SOURCE_DIR
chgrp -R 0 $LOCAL_SOURCE_DIR
chmod -R g+rw $LOCAL_SOURCE_DIR

# If a pom.xml is present, this is a normal build scenario
# so run maven.
if [ -f "$LOCAL_SOURCE_DIR/$POM_PATH/pom.xml" ]; then

  if [ -z "$INCREMENTAL" ]; then
    export INCREMENTAL=true
  fi

  if [[ "$INCREMENTAL" = "true" ]]; then 
    # restore any maven dependencies which will be present if this is an
    # incremental build
    echo -n "INCREMENTAL builds NOT supported due to excessive build sizes"
    exit 1
  fi

  pushd $LOCAL_SOURCE_DIR/$POM_PATH &> /dev/null
  MAVEN_ARGS="$MAVEN_ARGS --batch-mode --settings $HOME/.m2/settings.xml\
                -Dprofile.portDataSourceClassName=$PORTDATASOURCECLASSNAME \
                -Dprofile.servDataSourceClassName=$SERVDATASOURCECLASSNAME \
                -Djboss=jboss \
                -Dproject.build.sourceEncoding=UTF-8 \
                -Denv.db.environment=${DB_ENVIRONMENT} \
                -Dprofile.config.version=production \
                -Dprofile.application.baseurl.protocol=http \
                -Dprofile.datasource.jndiname.servdb=${SERVDB_JNDI} \
                -Dprofile.datasource.jndiname.portdb=${PORTDB_JNDI} \
                -Dprofile.log.file.prefix=/var/log/entando/engine_ \
                -Dprofile.log.activeFileOutput=true \
                -Dprofile.resources.path=/entando-data/resources \
                -Dprofile.resources.path.protected=/entando-data/protected \
                -Dprofile.index.path=/entando-data/indexdir \
                -Djava.net.preferIPv4Stack=true"

  #Append user provided args
  if [ -n "$MAVEN_ARGS_APPEND" ]; then
    export MAVEN_ARGS="$MAVEN_ARGS $MAVEN_ARGS_APPEND"
  fi
  echo " Found pom.xml... attempting to build with 'mvn ${MAVEN_ARGS}'"

  mvn --version
  mvn $MAVEN_ARGS

  ERR=$?
  if [ $ERR -ne 0 ]; then
    echo "Aborting due to error code $ERR from mvn $MAVEN_ARGS"
    exit $ERR
  fi

  echo -n "Cleaning $DEPLOYMENTS_DIR..."
  rm -rf $DEPLOYMENTS_DIR/*
  echo " cleaned up"

  mv "${LOCAL_SOURCE_DIR}/target/*.war" "${DEPLOYMENTS_DIR}/"
  init_derby "${LOCAL_SOURCE_DIR}/target"
  popd &> /dev/null
else
  echo -n "Cleaning $DEPLOYMENTS_DIR..."
  rm -rf $DEPLOYMENTS_DIR/*
  echo " cleaned up"
  echo "Moving binaries in source directory into $DEPLOYMENTS_DIR for later deployment..."
  mv "${LOCAL_SOURCE_DIR}/target/*.war"  "${DEPLOYMENTS_DIR}/"
  init_derby "${LOCAL_SOURCE_DIR}"
  ERR=$?
  if [ $ERR -ne 0 ]; then
    echo "Aborting due to error code $ERR from moving war files, maybe it doesn't exist "
    exit $ERR
  fi
fi

echo "...done"

exit $rc
